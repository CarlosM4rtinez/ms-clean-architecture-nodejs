// Remember to first generate the prisma schema
// npx prisma generate --schema=./infrastructure/driven-adapters/prisma-client-db/src/resources/prisma/schema.prisma

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Agreement {
    id                  BigInt              @id @default(autoincrement())
    numero              String?             @unique @db.VarChar(255)
    nombre              String?             @unique @db.VarChar(255)
    razon_social        String?             @db.VarChar(255)
    codigo_sector       String?             @db.VarChar(255)
    tipo_codigo_sector  String?             @db.VarChar(255)
    codigo_base_calculo String?             @db.VarChar(255)
    tipo_amortizacion   String?             @db.VarChar(255)
    calculator          String?             @db.VarChar(255)
    provider_capacity   String?             @db.VarChar(255)
    codigo_csb          String?             @db.VarChar(255)
    nombre_csb          String?             @db.VarChar(255)
    created_at          DateTime            @default(now()) @db.Timestamptz(6)
    updated_at          DateTime            @updatedAt @db.Timestamptz(6)
    empresa             String?             @db.VarChar(255)
    convenio_id         String?             @db.VarChar(255)
    firma_promotor      Boolean             @default(true) @db.Boolean
    videoTask           Boolean             @default(false) @db.Boolean
    signatureColor      String              @db.VarChar(20)
    versions            Version[]
    documents           AgreementDocument[]

    @@map("convenios")
}

model Document {
    id                BigInt              @id @default(autoincrement())
    name              String              @unique @db.VarChar(255)
    technicalName     String              @unique @db.VarChar(255)
    clasification     String              @db.VarChar(255)
    required          Boolean             @default(true) @db.Boolean
    visible           Boolean             @default(false) @db.Boolean
    isSignature       Boolean             @default(true) @db.Boolean
    isProtocolExp     Boolean             @default(false) @db.Boolean
    isSpecialDocument Boolean             @default(false) @db.Boolean
    isAnexoDocument   Boolean             @default(false) @db.Boolean
    isLCOM            Boolean             @default(false) @db.Boolean
    isPassport        Boolean             @default(false) @db.Boolean
    created_at        DateTime            @default(now()) @db.Timestamptz(6)
    updated_at        DateTime            @updatedAt @db.Timestamptz(6)
    agreements        AgreementDocument[]
    DocumentField     DocumentField[]

    @@map("documentos")
}

model AgreementDocument {
    id        BigInt    @id @default(autoincrement())
    agreement Agreement @relation(fields: [convenio], references: [numero])
    convenio  String    @db.VarChar(255)
    document  Document  @relation(fields: [documento], references: [technicalName])
    documento String    @db.VarChar(255)

    @@map("documentos_convenio")
}

model Field {
    id            BigInt          @id @default(autoincrement())
    name          String          @unique @db.VarChar(255)
    technicalName String          @unique @db.VarChar(255)
    clasification String          @db.VarChar(255)
    type          String          @db.VarChar(255)
    required      Boolean         @default(true) @db.Boolean
    isCNCA        Boolean         @default(false) @db.Boolean
    max           BigInt
    isLCOM        Boolean         @default(false) @db.Boolean
    isSpecial     Boolean         @default(false) @db.Boolean
    isClient      Boolean         @default(false) @db.Boolean
    convertTo     String?         @db.VarChar(255)
    created_at    DateTime        @default(now()) @db.Timestamptz(6)
    updated_at    DateTime        @updatedAt @db.Timestamptz(6)
    DocumentField DocumentField[]

    @@map("campos")
}

model DocumentField {
    id         BigInt   @id @default(autoincrement())
    Document   Document @relation(fields: [document], references: [technicalName])
    document   String   @map("documento") @db.VarChar(255)
    Field      Field    @relation(fields: [field], references: [technicalName])
    field      String   @map("campo") @db.VarChar(255)
    special    String[] @map("especial")
    skip       String[] @map("omitir")
    channel    String[] @map("canal")
    input      String
    order      BigInt   @map("orden")
    typeFile   String[]
    isRequired Boolean  @default(true) @map("required")

    @@map("campos_documento")
}

model Version {
    id         BigInt    @id @default(autoincrement())
    version    String    @unique @db.VarChar(255)
    created_at DateTime  @default(now()) @db.Timestamptz(6)
    updated_at DateTime  @updatedAt @db.Timestamptz(6)
    Agreement  Agreement @relation(fields: [agreement], references: [numero])
    agreement  String    @map(name: "agrement") @db.VarChar(255)

    @@map("version")
}
